\documentclass[12pt]{article}

\usepackage{sbc-template}
\usepackage{graphicx,url}
\usepackage[brazil]{babel}   
\usepackage[latin1]{inputenc}  
     
\sloppy

\title{Estudo de caso de um sistema de informa��o de estat�stica usando arquitetura\\MVC client-side}
\author{
	Rafael Andrade de Oliveira\inst{1},
	Diogo Lucas\inst{1}
}
\address{
	P�s-Gradua��o em Tecnologias Aplicadas a Sistemas de Informa��o com M�todos �geis
	\\Centro Universit�rio Ritter dos Reis (UniRitter)
	\\Caixa Postal 1355 -- 90.840-440 -- Porto Alegre -- RS -- Brasil 
	\email{
		eu.rafa@gmail.com,
		diogolucas@gmail.com
	}
}

\begin{document} 

\maketitle

\begin{abstract}

This paper describes a case study on the implementation of an statistical information system using the single-page application concept. The objective of this study is to provide a different system architecture to realize data analysis and sought to join relevant subjects present in the field of Information Technology as data analysis, BI, client-side MVC and REST services. For this study were chosen few tools and frameworks in order to enable the idea of the proposed information system, its features and advantages that are detailed throughout this article.

\end{abstract}
     
\begin{resumo} 

O presente trabalho relata um estudo de caso sobre a implementa��o de um sistema de informa��o de estat�stica usando o conceito single-page application. O objetivo deste estudo � apresentar uma arquitetura de sistema diferente para realizar an�lise de dados e para isso procurou-se juntar assuntos bastantes presentes na �rea de Tecnologia da Informa��o como an�lise de dados, BI, MVC client-side e servi�os REST. Para a realiza��o deste estudo foram escolhidas algumas ferramentas e frameworks de mercado de forma a viabilizar a ideia do sistema de informa��o proposto, suas caracter�sticas e diferenciais que ser�o detalhadas ao longo deste artigo.

\end{resumo}

\section{Introdu��o}

Este artigo tem como objetivo apresentar um estudo de caso sobre um sistema de informa��o de estat�stica, demonstrando conceitos e a forma de trabalhar com cubo de dados OLAP (presente em sistemas de business intelligence), a montagem de \emph{dashboards} no lado cliente (\emph{front-end}), e o desenvolvimento usando uma arquitetura MVC \emph{client-side}.

A escolha do tema justifica-se pela import�ncia da an�lise e estat�sticas de dados para tomada de decis�o e competitividade no mercado e a relev�ncia da arquitetura MVC \emph{client-side} na atualidade. Hoje em dia muitas empresas investem em BI (Business Intelligence), pois entendem que a an�lise do seu pr�prio neg�cio � importante para alavancar resultados. 

Diferente da tradicional abordagem de sistemas de BI (Business Intelligence), este artigo ir� propor uma solu��o onde a an�lise � realizada no lado cliente, apenas com resursos locais de navegador e hardware. Normalmente as ferramentas de BI se baseiam em dados de um DW (Data Warehouse) onde os dados s�o desnormalizados para melhor performance. Atrav�s de uma ferramenta de ETL (Extract, Transform, Load), os dados s�o extra�dos  de um banco de dados operacional com modelo normalizado, passam por um processo de transforma�ao e por fim s�o carregados no DW j� na forma agregada e sumarizada. Ainda assim, a performance de um BI depende de uma s�rie de fatores, entre eles o tr�fego e lat�ncia de rede, a conex�o com o banco de dados, a execu��o da consulta, al�m da concorr�ncia de requisi��es entre servidores. 

Estrutura?
M�todos �geis?

Antes de apresentar o sistema de informa��o elaborado, � importante relembrar alguns conceitos que ser�o relacionados no decorrer do artigo.


\subsection{Arquitetura MVC client-side}

A arquitetura MVC client-side se diferencia do modelo tradicional devido ao local onde s�o executados os componentes View e Controller oriundos da sigla MVC [SIGLA], que no caso s�o executados no lado cliente (client-side), mais especificamente no navegador (browser) e n�o no lado servidor (\emph{server-side}).

Essa abordagem tamb�m � conhecida como \emph{single-page applications}. Significa que, como o pr�prio nome diz, a aplica��o � apresentada em uma p�gina �nica e o seu conte�do � carregado dinamicamente. Entre as vantagens que esta abordagem traz est�o:

Melhor experi�ncia para o usu�rio, a medida que a aplica��o web funciona similar a uma aplica��o desktop, al�m de proporcionar melhor performance por evitar a carga completa de p�ginas a cada intera��o.

Melhor desempenho na transfer�ncia de dados

Existe tamb�m um ganho consider�vel em velocidade na transmiss�o dos dados, pois ao inv�s de trafegar o conte�do HTML (HyperText Markup Language) completo a cada intera��o do usu�rio, na arquitetura client-side o aplicativo completo � transferido na primeira requisi��o e as requisi��es seguintes s�o respons�veis por trafegar apenas os dados brutos entre o cliente e o servidor, normalmente no formato JSON. Este ganho � vis�vel em aplica��es m�veis onde a velocidade na transfer�ncia dos dados normalmente � baixa.

Redu��o de carga no lado servidor

O aplicativo completo passa a ser fornecido atrav�s de arquivos html, css e javascript que podem ser comprimidos e distribu�dos atrav�s de CDN's com facilidade. Ap�s baixados pela primeira vez esses arquivos s�o mantidos em cache no browser do usu�rio. O servidor fica respons�vel apenas por fornecer uma API e enviar e receber os dados brutos no formato JSON. Dessa forma todo o processamento respons�vel por parsing dos dados e gera��o de templates fica no lado cliente e n�o mais no servidor, liberando recursos.

Facilidade de manuten��o

Como aplica��es client-side dependem apenas da API fornecida pelo servidor, as manuten��es no lado servidor podem ser feitas de forma independente e transparente para o lado cliente (desde que n�o mude a API, obviamente). Da mesma forma, o lado cliente pode ser alterado sem a necessidade de alterar nada no lado servidor.

Gerenciamento de equipes

Como o lado cliente e o lado servidor passam a ser desenvolvidos de forma completamente independente, a �nica coisa necess�ria para os dois times trabalharem em paralelo � a defini��o da estrutura da API. Com esta defini��o pronta ambos os times podem trabalhar em paralelo onde o time front-ent desenvolve toda a parte client-side utilizando uma API com dados fict�cios enquanto o time de back-end desenvolve a parte servidora se preocupando apenas em respeitar a especifica��o da API acordada entre as equipes.

Facilidade de inclus�o de novos front-ends

Como o lado servidor fornece apenas a API, torna-se muito mais f�cil desenvolver novos front-ends para dispositivos espec�ficos como uma aplica��o nativa para iOS ou Android, por exemplo.

Os frameworks MVC client-side substituem totalmente os frameworks MVC server-side?

N�o. Os frameworks server-side passam a fornecer apenas uma API, normalmente no formato REST, para ser consumida pela aplica��o MVC no lado cliente. Toda a parte de controle de rotas, renderiza��o de templates e valida��o ficam no lado cliente. A parte servidora fica respons�vel pelas valida��es (novamente? sim, as valida��es devem ocorrer tanto no lado cliente quanto no lado servidor) e por armazenar e recuperar os dados em um banco de dados.
Frameworks

Existem diversos frameworks MVC client-side mas alguns que vem ganhando mais destaque ultimamente s�o:

    Backbone.js
    Ember.js
    Angular.js

Alguns outros frameworks que possuem a parte MVC e mais alguns componentes gr�ficos.

    Sencha Touch
    ExtJS

Quais as desvantagens de utilizar MVC client-side?

A principal dificuldade � a necessidade de aprender mais um (ou as vezes mais do que um) framework espec�fico para trabalhar exclusivamente com o front-end. A inclus�o dessa parte da aplica��o, apesar de facilitar a manuten��o como comentado anteriormente, adiciona uma nova camada na aplica��o, que precisa ser compreendida e respeitada pelo time.
Outro fator importante a ser considerado � o fato de que aplica��es client-side necessitam da execu��o do c�digo javascript para gerarem o conte�do html e exibi-lo ao usu�rio. Apesar de praticamente n�o existirem usu�rios com javascript desativado em seus navegadores, os mecanismos de busca ainda tem dificuldade em indexar p�ginas com conte�do gerado dinamicamente no lado cliente. Se o seu projeto exige que o conte�do do seu aplicativo seja indexado por mecanismos de busca, talvez adotar uma arquitetura puramente mvc client-side n�o sejam a melhor op��o.

\section{Ferramentas}

\subsection{HyperCube}\label{sec:hypercube}

HyperCube � uma biblioteca escrita em JavaScript que proporciona a cria��o de cubos de dados multi-dimensional, permite a aplica��o de filtros e agrega��es, gerando dados estat�scos para fins de an�lise.
\emph{Open source} sob licen�a Apache 2.0, o HyperCube est� publicado no GitHub, onde est� descrito como um banco de dados OLAP (On-Line Analytical Processing) leve escrito em Javascript, �til para qualquer aplica��o que precise extrair m�tricas para prop�sitos de gr�ficos din�micos.

\subsubsection{OLAP}

OLAP (On-Line Analytical Processing)

\subsubsection{Dimens�es}

D

\subsubsection{Medidas}

M

\subsubsection{Cubo de dados}

A estrutura de dados interpretada pelo HyperCube � um mapa no formato JSON (JavaScript Object Notation), onde seus registros cont�m tempo, fatos e medidas.

\begin{figure}[ht]
\centering
\includegraphics[width=.5\textwidth]{1.jpg}
\caption{IMAGEM do MAPA JSON}
\label{fig:1}
\end{figure}

Esta estrutura de dados � convertida em um cubo de dados pesquis�vel, ou seja, apto a ser filtrado e consumido por fun��es matem�ticas.

\begin{figure}[ht]
\centering
\includegraphics[width=.3\textwidth]{2.jpg}
\caption{IMAGEM do RESULTADO NO CONSOLE JAVASCRIPT in Section~\ref{sec:hypercube}.}
\label{fig:2}
\end{figure}

\subsubsection{HyperCube API}

O HyperCube fornece algumas fun��es para trabalhar com o cubo de dados e obter as informa��es para an�lise. As mais relevantes s�o:

\begin{description}
\item[count] Retorna o tamanho do cubo de dados, ou seja, a quantidade de objetos.
\item[getFactNames] Retorna uma lista com os fatos contidos no cubo de dados.
\item[getValues] Retorna uma lista com os valores distintos contidos em um determinado fato
\item[slice] Retorna um cubo de dados filtrado a partir de fatos
\item[sliceDates] Retorna um cubo de dados filtrado com dados entre duas datas
\item[dice] Retorna um cubo de dados resultante da exclus�o de objetos a partir de fatos
\item[merge] Retorna a mescla um cubo de dados com outro cubo de dados
\item[sum] Retorna a soma das medidas no cubo
\item[avg] Retorna a m�dia das medidas no cubo
\item[topSum] Retorna as maiores somas das medidas no cubo
\item[serialize] Transforma o cubo de dados no formato JSON
\item[deserialize] Cria o cubo de dados a partir de um objeto no formato JSON
\end{description}

\subsection{AngularJS}

.
MVC client-site. Dentro deste conceito, est� o framework AngularJS, da empresa Google.
.
Falar sobre REST
Falar sobre MVVM


.
https://angularjs.org/

\subsection{Spark}

Spark � um micro web \emph{framework} desenvolvido que tem como caracter�stica viabilizar a cria��o de aplica��es web em Java com o m�nimo de esfor�o poss�vel, sem a necessidade de configura��es em XML (eXtensible Markup Language).

Inspirado no \emph{framework} Sinatra, o Spark � muito leve e tem como foco a facilidade do desenvolvimento web puramente Java de forma realmente simples e elegante, o que torna divertido para os desenvolvedores.

O Spark � intrigante pelo fato de sua simplicidade \cite{francisco:14}. Est� na vers�o 2.0.0, uma vers�o que foi desenvolvida incluindo adapta��es para a vers�o 8 da linguagem Java, atualizando o \emph{framework} e usando recursos novos como a funcionalidade \textbf{Lambda}, deixando assim o \emph{framework} ainda mais elegante.

Para exemplificar a simplicidade de um servi�o REST () usando o Spark, o pr�prio site do Spark apresenta o servi�o HelloWorld, respondendo para o mapeamento "/hello" atrav�s do m�todo HTTP GET como mostra a figura \ref{fig:3}. Para executar o servi�o, ou seja, coloc�-lo no ar ou disponibiliz�-lo para consumo, basta executar a classe como um programa Java, pois o Spark possui o servidor de aplica�ao Jetty embutido.

\begin{figure}[ht]
\centering
\includegraphics[width=1\textwidth]{3.jpg}
\caption{IMAGEM DO SERVI�O HELLOWORLD}
\label{fig:3}
\end{figure}

Com o servi�o pronto, o acesso j� pode ser realizado atrav�s de uma requisi��o HTTP. No exemplo apresentado no site, a URL do servi�o � \textbf{http://localhost:4567/hello}, onde o \emph{host} � \textbf{localhost} (servidor local) e a porta � \textbf{4567}, a porta padr�o do Spark que pode ser configurada. Realizando a chamada do servi�o no navegador, obtemos o resultado apresentado na figura \ref{fig:4}.

\begin{figure}[ht]
\centering
\includegraphics[width=1\textwidth]{4.jpg}
\caption{SERVI�O EXECUTADO NO NAVEGADOR}
\label{fig:4}
\end{figure}

Fora a facilidade do desenvolvimento com Spark, a performance tamb�m � um ponto positivo do framework, mesmo rodando sobre a JVM (Java Virtual Machine). Foi colocado a prova e comparado com outras tecnologias e o resultado foi �timo \cite{bijan:14}.
Se voc� quiser saber mais sobre este projeto, acesse o site http://www.sparkjava.com.

Y

\section{Mozaic}

\subsection{Apresenta��o}

O sistema de informa��o desenvolvido chama-se Mozaic. Trata-se de uma ferramenta de an�lise de dados visual que permite aplicar filtros e realizar segmenta��es sobre cubos de dados multi-dimensionais. � uma aplica��o web de arquitetura moderna, criada no conceito de p�gina �nica (\emph{single-page}) usando o \emph{framework} AngularJS. Tem como principal caracter�stica a manipula��o dos dados diretamente no lado cliente (\emph{front-end}) buscando melhor desempenho fazendo uso de recursos no lado cliente. Entende-se com isso o uso da mem�ria pelo navegador e n�o tr�fego de rede e consultas em banco de dados.

Para manipular os dados, o Mozaic utiliza a da API (Application Programming Interface) JavaScript do HyperCube[REF], que disponibiliza algumas fun��es permitindo que se extraia as informa��es de medidas do cubo de dados. � dessa forma que o Mozaic obtem os dados e, com posse deles, apresenta-os ao usu�rio de forma visual atrav�s de gr�ficos e \emph{dashboards}.

\subsection{Dados}

Para servir de exemplo da implementa��o do sistema, foi escolhida uma base de dados de hist�rico de copas do mundo, fornecida pelo site da FIFA (F�d�ration Internationale de Football Association). Esta base de dados � usada para a montagem do objeto de dados mapeado no formato JSON [SIGLA] como mostra a figura \ref{fig:7}, que � a estrutura conhecida para que o HyperCube fa�a a gera��o do cubo de dados multi-dimensional para aplicar suas fun��es estat�sticas.

\begin{figure}[ht]
\centering
\includegraphics[width=.5\textwidth]{7.jpg}
\caption{IMAGEM DO JSONEDITOR ONLINE]}
\label{fig:7}
\end{figure}

\subsection{Arquitetura}

O Mozaic foi desenvolvido usando o conceito \emph{single-page application}, usando o framework AngularJS da Google no \emph{front-end} da aplica��o. A aplica��o consume uma API de servi�os REST [SIGLA] escritos na linguagem Java. A figura \ref{fig:5} apresenta a arquitetura do Mozaic e a forma de integra��o com a API de servi�os.

\begin{figure}[ht]
\centering
\includegraphics[width=.5\textwidth]{5.jpg}
\caption{DESENHO DA ARQUITETURA DO SISTEMA}
\label{fig:5}
\end{figure}

\subsubsection{API de servi�os REST}

Para o desenvolvimento do sistema de informa��o Mozaic, uma simples API (Application Programming Interface) de servi�os REST (Representational State Transfer) foi implementada para que o Mozaic consuma os dados iniciais e monte os dashboards e filtros no front-end.
A API (Application Programming Interface) fornece o servi�o carregarDados, suportando o m�todo HTTP (Hypertext Transfer Protocol) \textbf{GET} sem esperar par�metros. Este servi�o, escrito em Java e publicado com o \emph{framework} Spark, � respons�vel por carregar todos os dados dos copas do mundo da FIFA (F�d�ration Internationale de Football Association) e retornar os mesmos como um objeto JSON como pode ser visto na figura \ref{fig:6}. Inicialmente os dados foram colocados em um arquivo f�sico, pois o foco deste artigo � a manipula��o dos dados diretamente no front-end sobre cubo de dados gerado pelo HyperCube. Os dados tamb�m poderiam ser obtidos atrav�s de um DW (Data Warehouse) em banco de dados relacional ou, melhor ainda, banco de dados n�o-relacional (NoSQL - Not Only SQL), por�m conex�o e consulta a banco de dados fogem um pouco do escopo do artigo.

\begin{figure}[ht]
\centering
\includegraphics[width=.5\textwidth]{6.jpg}
\caption{IMAGEM DO OBJETO JSON]}
\label{fig:6}
\end{figure}


Fato

Medida

HyperCube

https://github.com/thesmart/js-hypercube

Para usar o HyperCube, criamos o cubo de dados atrav�s de um objeto javacript no formato JSON[SIGLA], com uma estrutura predefinida contendo o momento do dado, fatos e medidas como � demonstrado na imagem abaixo:
[IMG]
O HyperCube deserializa o objeto e monta o cubo de dados para ser utilizado, ou seja, dispon�vel para ser filtrado e calcular dados atrav�s de fun��es de agrega��o

\subsection{Interface}

Embora a principal caracter�stica do Mozaic esteja na sua ideia de arquitetura e mecanismo de an�lise, a \emph{interface} da aplica��o � tamb�m um ponto important�ssimo pois � no \emph{front-end} que s�o montados os filtros de an�lise e \emph{dashboards} com dados e gr�ficos consolidados. Al�m disso, a forma com que os dados se mant�m atualizados � baseada no paradigma MVVM do Angular, mantendo \textbf{Model} e \textbf{View} sincronizados, possibilitando manter dados atualizados em tempo real.

O \emph{design} da aplica��o, bem como os gr�ficos, al�m de apresentar corretamente as informa��es devem mostrar os dados de forma clara e objetiva para possibilitar uma an�lise mais r�pida e assertiva.


Configurar, CDN (Content Delivery Network)



\section{Considera��es Finais}

Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas. Umas 10 linhas.

\bibliographystyle{sbc}
\bibliography{artigo-rafael-oliveira}

\end{document}